Traceback (most recent call last):
  File "/usr/local/lib/python3.7/dist-packages/jupyter_cache/executors/utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "/usr/local/lib/python3.7/dist-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/local/lib/python3.7/dist-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/local/lib/python3.7/dist-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/lib/python3.7/asyncio/base_events.py", line 587, in run_until_complete
    return future.result()
  File "/usr/local/lib/python3.7/dist-packages/nbclient/client.py", line 664, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "/usr/local/lib/python3.7/dist-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/local/lib/python3.7/dist-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
fig = plt.figure(figsize=(20,20))
_ = tree.plot_tree(clf, feature_names=list(dataset1_url.columns.values)[:4], class_names=list(dataset1_url.columns.values)[4] ,filled=True)
------------------

[0;31m[0m
[0;31mIndexError[0mTraceback (most recent call last)
[0;32m<ipython-input-4-cb397d0d557e>[0m in [0;36m<module>[0;34m[0m
[1;32m      1[0m [0mfig[0m [0;34m=[0m [0mplt[0m[0;34m.[0m[0mfigure[0m[0;34m([0m[0mfigsize[0m[0;34m=[0m[0;34m([0m[0;36m20[0m[0;34m,[0m[0;36m20[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 2[0;31m [0m_[0m [0;34m=[0m [0mtree[0m[0;34m.[0m[0mplot_tree[0m[0;34m([0m[0mclf[0m[0;34m,[0m [0mfeature_names[0m[0;34m=[0m[0mlist[0m[0;34m([0m[0mdataset1_url[0m[0;34m.[0m[0mcolumns[0m[0;34m.[0m[0mvalues[0m[0;34m)[0m[0;34m[[0m[0;34m:[0m[0;36m4[0m[0;34m][0m[0;34m,[0m [0mclass_names[0m[0;34m=[0m[0mlist[0m[0;34m([0m[0mdataset1_url[0m[0;34m.[0m[0mcolumns[0m[0;34m.[0m[0mvalues[0m[0;34m)[0m[0;34m[[0m[0;36m4[0m[0;34m][0m [0;34m,[0m[0mfilled[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/tree/_export.py[0m in [0;36mplot_tree[0;34m(decision_tree, max_depth, feature_names, class_names, label, filled, impurity, node_ids, proportion, rounded, precision, ax, fontsize)[0m
[1;32m    193[0m         [0mfontsize[0m[0;34m=[0m[0mfontsize[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    194[0m     )
[0;32m--> 195[0;31m     [0;32mreturn[0m [0mexporter[0m[0;34m.[0m[0mexport[0m[0;34m([0m[0mdecision_tree[0m[0;34m,[0m [0max[0m[0;34m=[0m[0max[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    196[0m [0;34m[0m[0m
[1;32m    197[0m [0;34m[0m[0m

[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/tree/_export.py[0m in [0;36mexport[0;34m(self, decision_tree, ax)[0m
[1;32m    654[0m         [0max[0m[0;34m.[0m[0mclear[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    655[0m         [0max[0m[0;34m.[0m[0mset_axis_off[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 656[0;31m         [0mmy_tree[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_make_tree[0m[0;34m([0m[0;36m0[0m[0;34m,[0m [0mdecision_tree[0m[0;34m.[0m[0mtree_[0m[0;34m,[0m [0mdecision_tree[0m[0;34m.[0m[0mcriterion[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    657[0m         [0mdraw_tree[0m [0;34m=[0m [0mbuchheim[0m[0;34m([0m[0mmy_tree[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    658[0m [0;34m[0m[0m

[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/tree/_export.py[0m in [0;36m_make_tree[0;34m(self, node_id, et, criterion, depth)[0m
[1;32m    630[0m         [0;31m# traverses _tree.Tree recursively, builds intermediate[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m    631[0m         [0;31m# "_reingold_tilford.Tree" object[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 632[0;31m         [0mname[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0mnode_to_str[0m[0;34m([0m[0met[0m[0;34m,[0m [0mnode_id[0m[0;34m,[0m [0mcriterion[0m[0;34m=[0m[0mcriterion[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    633[0m         if et.children_left[node_id] != _tree.TREE_LEAF and (
[1;32m    634[0m             [0mself[0m[0;34m.[0m[0mmax_depth[0m [0;32mis[0m [0;32mNone[0m [0;32mor[0m [0mdepth[0m [0;34m<=[0m [0mself[0m[0;34m.[0m[0mmax_depth[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/tree/_export.py[0m in [0;36mnode_to_str[0;34m(self, tree, node_id, criterion)[0m
[1;32m    290[0m             [0;31m# Always write node decision criteria, except for leaves[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m    291[0m             [0;32mif[0m [0mself[0m[0;34m.[0m[0mfeature_names[0m [0;32mis[0m [0;32mnot[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 292[0;31m                 [0mfeature[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0mfeature_names[0m[0;34m[[0m[0mtree[0m[0;34m.[0m[0mfeature[0m[0;34m[[0m[0mnode_id[0m[0;34m][0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    293[0m             [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    294[0m                 feature = "X%s%s%s" % (

[0;31mIndexError[0m: list index out of range
IndexError: list index out of range

